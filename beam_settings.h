/**
 * \file
 * \brief BeamSettings class declaration
 */
#ifndef BEAM_SETTINGS_H
#define BEAM_SETTINGS_H

#include "host_image_3d.cuh"
#include "float3_affine_transform.cuh"
#include "float3_idx_transform.cuh"
#include <vector>
//#include "float3_from_fan_transform.cuh"

/**
 * \brief ...
 */
class BeamSettings {
public:
    /**
     * @brief ...
     * @param spotWeights Non-owning pointer to pinned memory containing the spot weight maps for each energy layer. Energy layers are stacked along the slowest dimension, i.e. spotWeights[i,j,k] contains the weight of a spot with x_idx=i, y_idx=j and energy_layer_idx=k.
     * @param beamEnergies Reference to vector containing the beam energies for each enegy layer.
     * @param spotSigmas Reference to vector containing the spot sigmas (x and y) at iso in air for each energy layer.
     * @param raySpacing Spacing in x and y between adjacent raytracing rays at iso (determines the lateral resolution of the dose calculated in gantry coordinates).
     * @param tracerSteps The number of steps to carry out the raytracing for (given by the distance between near instersect and far intersect between image and the beam, divided by the raytrace step size).
     * @param sourceDist The apparent source to iso distance for the beam along x and y, used to calculate the divergence of spots.
     * @param spotIdxToGantry Transform from spot index to gantry coordinates. Transforming [i, j, k] gived the position, in gantry coordinates, of spot with x_idx=i, y_idx=j and at ray trace step k (i.e. the delta and offset in last dimension give the raytracing step length and the position along gantry z at which to start the raytracing).
     * @param gantryToImIdx Reference to affine transformation from gantry coordinates to indices in the patient image.
     * @param gantryToDoseIdx Reference to affince transformation from gantry coordinates to indices in the dose matrix.
     */
    BeamSettings(HostPinnedImage3D<float>* const spotWeights, const std::vector<float>& beamEnergies, const std::vector<float2>& spotSigmas, const float2 raySpacing, const unsigned int tracerSteps, const float2 sourceDist, const Float3IdxTransform spotIdxToGantry, const Float3AffineTransform& gantryToImIdx, const Float3AffineTransform& gantryToDoseIdx);

    /**
     * @brief ...
     * @return ...
     */
    HostPinnedImage3D<float>* getWeights();

    /**
     * @brief ...
     * @return ...
     */
    std::vector<float>& getEnergies();

    /**
     * @brief ...
     * @return ...
     */
    std::vector<float2>& getSpotSigmas();

    /**
     * @brief ...
     * @return ...
     */
    float2 getRaySpacing() const;

    /**
     * @brief ...
     * @return ...
     */
    unsigned int getSteps() const;

    /**
     * @brief ...
     * @return ...
     */
    float2 getSourceDist() const;

    /**
     * @brief ...
     * @return ...
     */
    Float3IdxTransform getSpotIdxToGantry() const;

    /**
     * @brief ...
     * @return ...
     */
    Float3AffineTransform getGantryToImIdx() const;

    /**
     * @brief ...
     * @return ...
     */
    Float3AffineTransform getGantryToDoseIdx() const;

    //
    // brief ...
    // return ...
    //
    //Float3FromFanTransform getFITII() const;

    //
    // brief ...
    // return ...
    //
    //Float3FromFanTransform getFITDI() const;

private:
    HostPinnedImage3D<float>* const sWghts;///< Non-owning pointer to...
    std::vector<float> bEnergies;   ///< ...
    std::vector<float2> sSigmas;    ///< ...
    float2 rSpacing;                ///< ...
    unsigned int steps;             ///< ...
    float2 sDist;                   ///< ...
    Float3IdxTransform sITG;        ///< ...
    Float3AffineTransform gTII;     ///< ...
    Float3AffineTransform gTDI;     ///< ...
    //Float3FromFanTransform fITII; ///< ...
    //Float3FromFanTransform fITDI; ///< ...
};

#endif // BEAM_SETTINGS_H
